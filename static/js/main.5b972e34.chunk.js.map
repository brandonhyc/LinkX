{"version":3,"sources":["assets/images/starlink_white.png","assets/images/satellite_color.svg","assets/images/space_background.jpg","layout/Header.js","layout/Footer.js","components/SatSettings.js","components/SatelliteList.js","constant.js","components/Globe.js","layout/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Layout","AppHeader","className","src","starlinkLogo","alt","theme","mode","defaultSelectedKeys","Component","Footer","AppFooter","style","textAlign","SatSettings","props","onChangeLongitude","value","setState","observerLong","onChangeLatitude","observerLat","onChangeAlt","observerAlt","onChangeRadius","radius","showSatellite","onConfirm","state","type","size","onClick","this","orientation","class","htmlFor","name","min","max","defaultValue","onChange","SatelliteList","e","console","log","target","dataItem","checked","onSelectionChange","onChangeDuration","duration","satList","satInfo","above","onClickBack","disabled","disableTrack","trackOnclick","margin","itemLayout","dataSource","renderItem","item","Item","actions","Meta","avatar","Satellite","title","satname","description","launchDate","SAT_BASE_URL","NEARBY_SATELLITE","SATELLITE_POSITION_URL","options","markerTooltipRenderer","marker","Globe","useState","setEvent","details","setDetails","bordered","width","position","fontSize","bottom","right","padding","coordinates","height","markers","onClickMarker","markerObject","event","markerObjectID","uuid","pointerEventPosition","x","clientX","y","clientY","onDefocus","previousFocus","Content","Sider","Panel","Collapse","TRACE_COLORS","Main","trackOnClick","setting","loadingSatPositions","statelliteFetches","selected","map","sat","satid","url","Axios","get","all","then","spread","result","data","res","satPositions","showTrace","catch","message","addOrRemove","previous","next","includes","filter","el","showNearbySatellite","fetchSatellite","openPanel","response","loadingSatellites","error","forEach","satIndex","positions","pos","index","info","id","color","satlongitude","satlatitude","reduce","acc","cur","unshift","activePanel","undefined","keys","overflow","left","activeKey","header","key","loading","length","marginLeft","backgroundImage","spaceBackground","minHeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b972e34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starlink_white.d0336c4f.png\";","module.exports = __webpack_public_path__ + \"static/media/satellite_color.0abd3f31.svg\";","module.exports = __webpack_public_path__ + \"static/media/space_background.a6530d49.jpg\";","import React, {Component} from 'react';\nimport starlinkLogo  from '../assets/images/starlink_white.png';\n\nimport { Layout, Menu } from 'antd';\n\nconst { Header } = Layout;\n\nexport default class AppHeader extends Component {\n    render() {\n        return (\n            <Header className=\"header\">\n                <div className=\"text-right\"> \n                    <img src={ starlinkLogo } className=\"App-logo\" alt=\"logo\" />\n                </div>\n                {/* <div className=\"App-logo\">\n                    \n                    <p className=\"title\">\n                        StarLink Tracker\n                    </p>\n                </div> */}\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n                </Menu>\n            </Header>\n        )\n    }\n}","import React, {Component} from 'react';\n\nimport { Layout } from 'antd';\n\nconst { Footer } = Layout;\n\nexport default class AppFooter extends Component {\n\n    render() {\n        return (\n            <Footer style={{ textAlign: 'center' }}>LinkX ©2018 Created by YC He</Footer>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { InputNumber, Button, Divider } from 'antd';\n\nexport default class SatSettings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            observerLong: 0,\n            observerLat: 0,\n            observerAlt: 0,\n            radius: 90,\n        }\n    }\n\n    onChangeLongitude = (value) => {\n        this.setState({\n            observerLong: value,\n        });\n    }\n\n    onChangeLatitude = (value) => {\n        this.setState({\n            observerLat: value,\n        });\n    }\n\n    onChangeAlt = (value) => {\n        this.setState({\n            observerAlt: value,\n        });\n    }\n\n    onChangeRadius = (value) => {\n        this.setState({\n            radius: value\n        })\n    }\n\n    showSatellite = () => {\n        this.props.onConfirm(this.state);\n    }\n\n    render() {\n        return (        \n            <div className=\"sat-setting\">\n                <div className=\"loc-setting\">\n                    <div className=\"setting-list\">\n                        <div className=\"show-nearby\">\n                            <Button\n                                type=\"primary\"\n                                size=\"large\"\n                                onClick={ this.showSatellite }\n                            >\n                                Find Nearby Satellites\n                            </Button>\n                        </div>\n                        <Divider orientation=\"left\">From Location</Divider>\n                        <div className=\"row pt-2\">\n                            <label class=\"col-4 text-right\" htmlFor=\"longitude\">Longitude: </label>\n                            <div className=\"col-6\">\n                                <InputNumber name=\"longitude\" \n                                    min={-180} max={180} \n                                    defaultValue={0} \n                                    className=\"d-inline-block w-100\"\n                                    onChange={ this.onChangeLongitude } \n                                />\n                            </div>\n                        </div>\n                        <div className=\"row pt-2\">\n                            <label class=\"col-4 text-right\" htmlFor=\"latitude\">Latitude: </label>\n                            <div className=\"col-6\">\n                                <InputNumber name=\"latitude\" \n                                    min={-90} max={90} \n                                    defaultValue={0} \n                                    className=\"d-inline-block w-100\"\n                                    onChange={ this.onChangeLatitude } \n                                />\n                            </div>\n                        </div>\n                        <div className=\"row pt-2\">\n                            <label class=\"col-4 text-right\" htmlFor=\"altitude\">Altitude(meters): </label>\n                            <div className=\"col-6\">\n                                <InputNumber name=\"altitude\" \n                                    min={-413} max={8850} \n                                    defaultValue={0} \n                                    className=\"d-inline-block w-100\"\n                                    onChange={ this.onChangeAlt } \n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <Divider orientation=\"left\">Range</Divider>\n                    <div className=\"setting-list\">\n                        <div className=\"list-item\">\n                            <div className=\"row pt-2\">\n                                <label className=\"col-4 text-right\"> Radius: </label>\n                                <div className=\"col-6\">\n                                    <InputNumber min={0} max={90}\n                                        defaultValue={0}\n                                        className=\"d-inline-block w-100\"\n                                        onChange={ this.onChangeRadius }\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { Button, List, Avatar, Checkbox, InputNumber } from 'antd';\n\nimport Satellite from \"../assets/images/satellite_color.svg\";\n\nexport default class SatelliteList extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            duration: 60,\n        }\n    }\n\n    onChange = e => {\n        console.log(e);\n        const { dataItem, checked } = e.target;\n        this.props.onSelectionChange(dataItem, checked);\n    }\n\n    onChangeDuration = (value) => {\n        this.setState({\n            duration: value\n        })\n    }\n\n    render() {\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\n\n        return (\n            <div className=\"sat-list-box\">\n                <Button type=\"primary\" onClick={ this.props.onClickBack }\n                        >Back</Button>\n                <Button className=\"ml-3\" type=\"primary\"\n                        disabled={ this.props.disableTrack }\n                        onClick={ () => this.props.trackOnclick(this.state.duration) }\n                >Track on the map</Button>\n\n                <div className=\"pt-3\">\n                    <label>Track Duration </label>\n                    <InputNumber\n                        min={0}\n                        max={90}\n                        defaultValue={0}\n                        style={{margin: \"0 2px\"}}\n                        onChange={this.onChangeDuration}\n                    />\n                </div>\n\n                <hr/>\n                <List\n                    itemLayout=\"horizontal\"\n                    size=\"small\"\n                    dataSource={ satList }\n                    renderItem={item => (\n                        <List.Item\n                            actions={[<Checkbox dataItem={ item } onChange={ this.onChange }/>]}\n                        >\n                            <List.Item.Meta\n                                avatar={<Avatar size={50} src={Satellite} />}\n                                title={<p>{item.satname}</p>}\n                                description={`Launched: ${item.launchDate}`}\n                            />\n\n                        </List.Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}","export const SAT_BASE_URL = \"https://www.n2yo.com/rest/v1/satellite\";\n\nexport const SAT_API_KEY = \"C6F92A-2RF2VB-JN8MNB-4J48\"; // Don’t copy this, use the API license key you get from N2YO\n\nexport const STARLINK_CATEGORY = \"52\";\n\nexport const NEARBY_SATELLITE = `${SAT_BASE_URL}/above`;\n\nexport const geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nexport const SATELLITE_POSITION_URL = `${SAT_BASE_URL}/positions`;","import React, { useState } from \"react\";\nimport ReactGlobe from \"react-globe\";\n\nimport \"tippy.js/dist/tippy.css\";\nimport \"tippy.js/animations/scale.css\";\n\nimport { Card } from \"antd\";\n\nfunction markerTooltipRenderer(marker) {\n    return `${marker.name}`;\n}\n\nconst options = {\n  markerTooltipRenderer\n};\n\nexport default function Globe(props) {\n\n  const [event, setEvent] = useState(null);\n  const [details, setDetails] = useState(null);\n\n  function onClickMarker(marker, markerObject, event) {\n    setEvent({\n      type: \"CLICK\",\n      marker,\n      markerObjectID: markerObject.uuid,\n      pointerEventPosition: { x: event.clientX, y: event.clientY }\n    });\n    setDetails(marker);\n  }\n\n  function onDefocus(previousFocus) {\n    setEvent({\n      type: \"DEFOCUS\",\n      previousFocus\n    });\n    setDetails(null);\n  }\n\n  return (\n      \n    <div>\n      {details && (\n          <Card title={details.name} bordered={true} style={{ \n              width: 300,\n              position: \"absolute\",\n              fontSize: 20,\n              bottom: 0,\n              right: 0,\n              padding: 0\n            }}>\n            <p>{`Latitude ${details.coordinates[0]} Longitude ${details.coordinates[1]}`}</p>\n        </Card>\n      )}\n      <ReactGlobe\n        height=\"95vh\"\n        markers={props.markers}\n        options={options}\n        width=\"80vw\"\n        onClickMarker={onClickMarker}\n        onDefocus={onDefocus}\n      />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nimport AppFooter from './Footer'\nimport SatSettings from '../components/SatSettings';\nimport SatelliteList from '../components/SatelliteList';\nimport { NEARBY_SATELLITE, STARLINK_CATEGORY, SAT_API_KEY, SATELLITE_POSITION_URL } from '../constant';\n\nimport { Layout, Card, Collapse } from 'antd';\nimport Axios from 'axios';\n\nimport spaceBackground from '../assets/images/space_background.jpg';\nimport Globe from '../components/Globe';\n\nconst { Content, Sider } = Layout;\nconst { Panel } = Collapse;\n\nconst SETTINGS_PANEL = '1';\nconst LIST_PANEL = '2';\nconst MINUTE = 60;\nconst MARKER_SIZE = 1;\nconst TRACE_COLORS = [ '#39FFAE', '#131147', '#0946A7', '#6749E7',];\nconst INTERVAL = 100;\n\nexport default class Main extends Component {\n    constructor(){\n        super();\n        this.state = {\n            loadingSatellites: false,\n            activePanel: [ SETTINGS_PANEL ],\n            loadingSatPositions: false,\n            setting: undefined,\n            selected: [],\n            markers: [],\n        }\n    }  \n\n    trackOnClick = (duration) => {\n        const { observerLat, observerLong, observerAlt } = this.state.setting;\n        duration = duration * MINUTE;\n        this.setState({ loadingSatPositions: true });\n        const statelliteFetches = this.state.selected.map( sat => {\n            const { satid } = sat;\n            const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerAlt}/${duration}/&apiKey=${SAT_API_KEY}`;\n            return Axios.get(url);\n        })\n\n        Axios.all(statelliteFetches)\n        .then(\n          Axios.spread((...result) => {\n              return result.map(item => item.data);\n          })\n        )\n        .then( res => {\n            this.setState({\n                satPositions: res,\n                loadingSatPositions: false,\n            });\n            this.showTrace();\n        })\n        .catch( e => {\n            console.log('err in fetch satellite position -> ', e.message);\n        })\n    }\n\n    addOrRemove = (item) => {\n        let { selected : previous } = this.state;\n        let next = previous.includes(item) \n                 ? previous.filter(el => el.satid !== item.satid)\n                 : [...previous, item];\n\n        this.setState({ selected: next });\n    }\n    \n    openPanel(keys) {\n        this.setState ({\n            activePanel: keys,\n        })\n    }\n\n    showNearbySatellite = (setting) => {\n        this.setState({ setting, });\n        this.fetchSatellite(setting);\n        this.openPanel( [LIST_PANEL] );\n    }\n\n    fetchSatellite = (setting) => {\n        const {\n            observerLat, \n            observerLong, \n            observerAlt, \n            radius,\n        } = setting;\n\n        const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerAlt}/${radius}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n  \n        Axios.get(url)\n            .then(response => {\n                this.setState({\n                    satInfo: response.data,\n                    loadingSatellites: true,\n                    selected: [],\n                })\n            })\n            .catch(error => {\n                console.error('err in fetch satellite -> ', error);\n            })\n            .then(res => {\n                this.setState({\n                    loadingSatellites: false,\n                })\n            });\n    }\n\n    showTrace = () => {\n        const satellies = this.state.satPositions;\n        satellies.forEach( (sat, satIndex) => {\n            this.setState({ markers : [\n                ...this.state.markers,\n                ...sat.positions\n                    .map((pos, index) => { return {\n                        name: sat.info.satname,\n                        id: sat.info.satid + '-' + index,\n                        color: TRACE_COLORS[satIndex],\n                        coordinates: [ pos.satlongitude, pos.satlatitude ],\n                        value: MARKER_SIZE, \n\n                    }}\n                    ).reduce((acc, cur, index) => { \n                        if (index % INTERVAL == 0) {\n                            acc.unshift(cur);\n                        }\n                        return acc;\n                    }, []),\n            ]});\n        });\n    }\n\n    render() {\n        return (\n            <Layout>\n                <Sider width={400} \n                        style={{\n                        overflow: 'auto',\n                        height: '100vh',\n                        position: 'fixed',\n                        left: 0,\n                        }} \n                        className=\"site-layout-background\"\n                >\n                    \n                      <Collapse activeKey={ this.state.activePanel }>\n                        <Panel header=\"Location Settings\" key=\"1\">\n                            <Card bordered={false}>\n                                <SatSettings onConfirm={ this.showNearbySatellite } />\n                            </Card>\n                        </Panel>\n                        <Panel header=\"Near Satellites\" key=\"2\">\n                            <Card bordered={false} loading={ this.state.loadingSatellites }>\n                                <SatelliteList class=\"overflow-auto\" \n                                    onClickBack={ () => this.openPanel([ SETTINGS_PANEL ]) }\n                                    satInfo={ this.state.satInfo } \n                                    onSelectionChange={ this.addOrRemove }\n                                    disableTrack={ this.state.selected.length === 0 }\n                                    trackOnclick={ this.trackOnClick }\n                                />\n                            </Card>\n                        </Panel>\n                    </Collapse>\n                </Sider>\n                <Layout style={{ marginLeft: 400 }}> \n                    <div style={{ backgroundImage: `url(${ spaceBackground })`}}>\n                    <Content\n                        \n                        style={{\n                            margin: 0,\n                            minHeight: 280,\n                            \n                        }}\n                    >\n                    <Globe markers={ this.state.markers }/>\n\n                    </Content>\n                    </div>\n                    <AppFooter style={{ textAlign: 'center' }}></AppFooter>\n                </Layout>\n            </Layout>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport AppHeader from './layout/Header'\nimport Main from './layout/Main'\n\nimport { Layout } from 'antd';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <AppHeader className=\"header\" />\n        <Main />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}